;/*****************************************************************************
; *
; * Data Encryption Standard (DES) Encrypt/Decrypt Routines
; *   56 bit key, 64 bit data block
; *   For more information see, AN1044
; *
; *****************************************************************************
; * FileName:		DES_asm.s
; * Dependencies:	None
; * Processor:		PIC24F, PIC24H, dsPIC30F, or dsPIC33F
; * Compiler:		MPLAB ASM30 3.23 or later
; * Company:		Microchip Technology Incorporated
; *
; * Software License Agreement
; *
; * The software supplied herewith by Microchip Technology Incorporated
; * (the ?Company?) for its PICmicro® Microcontroller is intended and
; * supplied to you, the Company?s customer, for use solely and
; * exclusively on Microchip PICmicro Microcontroller products. The
; * software is owned by the Company and/or its supplier, and is
; * protected under applicable copyright laws. All rights are reserved.
; * Any use in violation of the foregoing restrictions may subject the
; * user to criminal sanctions under applicable laws, as well as to
; * civil liability for the breach of the terms and conditions of this
; * license.
; *
; * Microchip Technology Inc. (?Microchip?) licenses this software to 
; * you solely for use with Microchip products.  The software is owned 
; * by Microchip and is protected under applicable copyright laws.  
; * All rights reserved.
; *
; * You may not export or re-export Software, technical data, direct 
; * products thereof or any other items which would violate any applicable
; * export control laws and regulations including, but not limited to, 
; * those of the United States or United Kingdom.  You agree that it is
; * your responsibility to obtain copies of and to familiarize yourself
; * fully with these laws and regulations to avoid violation.
; *
; * SOFTWARE IS PROVIDED ?AS IS.?  MICROCHIP EXPRESSLY DISCLAIM ANY 
; * WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING BUT NOT 
; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
; * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. IN NO EVENT SHALL MICROCHIP
; * BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES,
; * LOST PROFITS OR LOST DATA, HARM TO YOUR EQUIPMENT, COST OF PROCUREMENT
; * OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS BY THIRD PARTIES
; * (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR 
; * INDEMNITY OR CONTRIBUTION, OR OTHER SIMILAR COSTS. 
; *
; * Author				Date        Comment
; *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; * David Flowers		08/08/2006	Original release
; * David Flowers       09/13/2007	Bug fixes - labeled "BugFix1" 
; * Howard Schlunder	05/13/2010	Updated to support PIC24FxxxKAxxx parts and 
; *									devices with EDS memory.
; *****************************************************************************/
.equ VALID_ID,0
    .ifdecl __dsPIC33E
        .include "p33exxxx.inc"
    .endif

    .ifdecl __dsPIC33F
	    .include "p33fxxxx.inc"
    .endif

    .ifdecl __dsPIC30F
	    .include "p30fxxxx.inc"
    .endif

    .ifdecl __PIC24E
        .include "p24exxxx.inc"
    .endif

    .ifdecl __PIC24H
	    .include "p24hxxxx.inc"
    .endif

    .ifdecl __PIC24F
	    .include "p24fxxxx.inc"
    .endif

    .ifdecl __PIC24FK
	    .include "p24fxxxx.inc"
    .endif

.if VALID_ID <> 1
	.error "Processor ID not specified in generic include files.  New ASM30 assembler needs to be downloaded?"
.endif

.ifdecl __HAS_EDS
	.equ	PSVPAG,DSRPAG	
.endif


;Version 0.4
; requirements:
;  all code and tables must fit in one PSV page

;DES.s

.global _calcSubKeys
.global _des

.bss
.global _subKeyBlock
.global _Key
.global _M
.global _mode
.align 2
_M: .space 8
_Key: .space 24
;bit0: 1 = encrypt, 0 = decrypt
_subKeyBlock: .space 2
_mode: .space 1
_count: .space 1
_Kp: .space 8

.text


;************************* DES *************************;
.global _des
_des:	;this will encrypt or decrypt (change _mode to select feature - mode.lsb = 1 is encrypt)

	clr W0	;LSW of L
	clr W1  ;MSW of L
	clr W2  ;LSB of R
	clr W3  ;MSW of R

	;transpose [W3 W2 W1 W0] = IP[M];
	btsc _M+0,#0x6
	bset W3,#0xF
	btsc _M+1,#0x6
	bset W3,#0xE
	btsc _M+2,#0x6
	bset W3,#0xD
	btsc _M+3,#0x6
	bset W3,#0xC
	btsc _M+4,#0x6
	bset W3,#0xB
	btsc _M+5,#0x6
	bset W3,#0xA
	btsc _M+6,#0x6
	bset W3,#0x9
	btsc _M+7,#0x6
	bset W3,#0x8

	btsc _M+0,#0x4
	bset W3,#0x7
	btsc _M+1,#0x4
	bset W3,#0x6
	btsc _M+2,#0x4
	bset W3,#0x5
	btsc _M+3,#0x4
	bset W3,#0x4
	btsc _M+4,#0x4
	bset W3,#0x3
	btsc _M+5,#0x4
	bset W3,#0x2
	btsc _M+6,#0x4
	bset W3,#0x1
	btsc _M+7,#0x4
	bset W3,#0x0

	btsc _M+0,#0x2
	bset W2,#0xF
	btsc _M+1,#0x2
	bset W2,#0xE
	btsc _M+2,#0x2
	bset W2,#0xD
	btsc _M+3,#0x2
	bset W2,#0xC
	btsc _M+4,#0x2
	bset W2,#0xB
	btsc _M+5,#0x2
	bset W2,#0xA
	btsc _M+6,#0x2
	bset W2,#0x9
	btsc _M+7,#0x2
	bset W2,#0x8

	btsc _M+0,#0x0
	bset W2,#0x7
	btsc _M+1,#0x0
	bset W2,#0x6
	btsc _M+2,#0x0
	bset W2,#0x5
	btsc _M+3,#0x0
	bset W2,#0x4
	btsc _M+4,#0x0
	bset W2,#0x3
	btsc _M+5,#0x0
	bset W2,#0x2
	btsc _M+6,#0x0
	bset W2,#0x1
	btsc _M+7,#0x0
	bset W2,#0x0

	btsc _M+0,#0x7
	bset W1,#0xF
	btsc _M+1,#0x7
	bset W1,#0xE
	btsc _M+2,#0x7
	bset W1,#0xD
	btsc _M+3,#0x7
	bset W1,#0xC
	btsc _M+4,#0x7
	bset W1,#0xB
	btsc _M+5,#0x7
	bset W1,#0xA
	btsc _M+6,#0x7
	bset W1,#0x9
	btsc _M+7,#0x7
	bset W1,#0x8

	btsc _M+0,#0x5
	bset W1,#0x7
	btsc _M+1,#0x5
	bset W1,#0x6
	btsc _M+2,#0x5
	bset W1,#0x5
	btsc _M+3,#0x5
	bset W1,#0x4
	btsc _M+4,#0x5
	bset W1,#0x3
	btsc _M+5,#0x5
	bset W1,#0x2
	btsc _M+6,#0x5
	bset W1,#0x1
	btsc _M+7,#0x5
	bset W1,#0x0

	btsc _M+0,#0x3
	bset W0,#0xF
	btsc _M+1,#0x3
	bset W0,#0xE
	btsc _M+2,#0x3
	bset W0,#0xD
	btsc _M+3,#0x3
	bset W0,#0xC
	btsc _M+4,#0x3
	bset W0,#0xB
	btsc _M+5,#0x3
	bset W0,#0xA
	btsc _M+6,#0x3
	bset W0,#0x9
	btsc _M+7,#0x3
	bset W0,#0x8

	btsc _M+0,#0x1
	bset W0,#0x7
	btsc _M+1,#0x1
	bset W0,#0x6
	btsc _M+2,#0x1
	bset W0,#0x5
	btsc _M+3,#0x1
	bset W0,#0x4
	btsc _M+4,#0x1
	bset W0,#0x3
	btsc _M+5,#0x1
	bset W0,#0x2
	btsc _M+6,#0x1
	bset W0,#0x1
	btsc _M+7,#0x1
	bset W0,#0x0

	;prepare for 8 rounds
	clr.b _count
	bset.b _count,#0x3

	;enable Program space visibility
.ifndecl __HAS_EDS
	bset CORCON,#0x2
.endif

	;setup the PSV pointer
	mov #psvpage(S8),W13
	mov W13,PSVPAG

	mov _subKeyBlock,W13	;load the keys up

	clr W6	;clear the upper byte of this register to use as an index

	;Load the E table pointer
	mov #handle(E_Table)+#0x8000,W9		;+0x8000 to set the PSV bit

	clr W4	;leave this outside of the loop because the last step before the loopback is to clear it.

;****************** start of the loop *******************
DESLoop:

	clr W5
	clr W6
	clr W7

	;E(R.n-1), place each in a [x x 1 2 3 4 5 6] format so that S[E(R.n-1)] is easy
	;lookup E(R.n-1)

	lsr W1,#0x7,W11
	bclr W11,#0x0
	btsc W1,#0xF
	bset W4,#0x0	
	mov [W9+W11],W10
	btsc W1,#0x8
	bset W6,#0xD
	ior W10,W7,W7

	rlnc W1,W11
	and #0x1FE,W11
	btsc W1,#0x7
	bset W7,#0x0	
	mov [W9+W11],W10
	btsc W1,#0x0
	bset W5,#0xD
	ior W10,W6,W6

	lsr W0,#0x7,W11
	bclr W11,#0x0
	btsc W0,#0xF
	bset W6,#0x0	
	mov [W9+W11],W10
	btsc W0,#0x8
	bset W4,#0xD
	ior W10,W5,W5

	rlnc W0,W11
	and #0x1FE,W11
	btsc W0,#0x7
	bset W5,#0x0	
	mov [W9+W11],W10
	btsc W0,#0x0
	bset W7,#0xD
	ior W10,W4,W4

	;K XOR E(R.n-1)
	xor W4,[W13++],W4
	xor W5,[W13++],W5
	xor W6,[W13++],W6
	xor W7,[W13++],W7

	;if we are in decrypt mode then decrement the pointer instead of going forward
	btss _mode,#0x0
	sub #0x10,W13

	;Since P and the S tables do not have 
	;  any variable modification between the two steps, we can combine them into one step

	;lookup S8(B8) and S7(B7) (RAW dependencies removed, thus a little hard to read)

	;Now calculate L.(n+1) = L.(n-1) XOR f.n(R.(n-1))

	mov #handle(S1P_table)+#0x8000,W12
	lsr W7,#0x6,W11	;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
	add W11,W12,W12
	mov #handle(S2P_table)+#0x8000,W8	;split of RAW dependency by preloading pointer for next block
	mov.d [W12],W10
	xor W10,W3,W3
	xor W11,W2,W2


	sl W7,#0x2,W11
	and #0xFF,W11
	add W11,W8,W8
	mov #handle(S3P_table)+#0x8000,W12	;split of RAW dependency by preloading pointer for next block
	mov.d [W8],W10
	xor W10,W3,W3
	xor W11,W2,W2


	lsr W6,#0x6,W11	;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
	add W11,W12,W12
	mov #handle(S4P_table)+#0x8000,W8	;split of RAW dependency by preloading pointer for next block
	mov.d [W12],W10
	xor W10,W3,W3
	xor W11,W2,W2


	sl W6,#0x2,W11
	and #0xFF,W11
	add W11,W8,W8
	mov #handle(S5P_table)+#0x8000,W12	;split of RAW dependency by preloading pointer for next block
	mov.d [W8],W10
	xor W10,W3,W3
	xor W11,W2,W2


	lsr W5,#0x6,W11	;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
	add W11,W12,W12
	mov #handle(S6P_table)+#0x8000,W8	;split of RAW dependency by preloading pointer for next block
	mov.d [W12],W10
	xor W10,W3,W3
	xor W11,W2,W2


	sl W5,#0x2,W11
	and #0xFF,W11
	add W11,W8,W8
	mov #handle(S7P_table)+#0x8000,W12	;split of RAW dependency by preloading pointer for next block
	mov.d [W8],W10
	xor W10,W3,W3
	xor W11,W2,W2


	lsr W4,#0x6,W11	;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
	add W11,W12,W12
	mov #handle(S8P_table)+#0x8000,W8	;split of RAW dependency by preloading pointer for next block
	mov.d [W12],W10
	xor W10,W3,W3
	xor W11,W2,W2


	sl W4,#0x2,W11
	and #0xFF,W11
	add W11,W8,W8
	clr W4				;split of RAW dependency by clearing W4 for next round
	mov.d [W8],W10
	xor W10,W3,W3
	xor W11,W2,W2

	;Done with L.(n+1) = L.(n-1) XOR f.n(R.(n-1))

	;Now calculate R.(n+1) = R.(n-1) XOR f.(n+1)(L.(n+1))

	;E(L.n+1), place each in a [x x 1 2 3 4 5 6] format so that S[E(L.n+1)] is easy
	;lookup E(L.n+1)


	clr W5
	clr W6
	clr W7

	lsr W3,#0x7,W11
	bclr W11,#0x0
	btsc W3,#0xF
	bset W4,#0x0	
	mov [W9+W11],W10
	btsc W3,#0x8
	bset W6,#0xD
	ior W10,W7,W7

	rlnc W3,W11
	and #0x1FE,W11
	btsc W3,#0x7
	bset W7,#0x0	
	mov [W9+W11],W10
	btsc W3,#0x0
	bset W5,#0xD
	ior W10,W6,W6

	lsr W2,#0x7,W11
	bclr W11,#0x0
	btsc W2,#0xF
	bset W6,#0x0	
	mov [W9+W11],W10
	btsc W2,#0x8
	bset W4,#0xD
	ior W10,W5,W5

	rlnc W2,W11
	and #0x1FE,W11
	btsc W2,#0x7
	bset W5,#0x0	
	mov [W9+W11],W10
	btsc W2,#0x0
	bset W7,#0xD
	ior W10,W4,W4

	;K XOR E(R.n-1)
	xor W4,[W13++],W4
	xor W5,[W13++],W5
	xor W6,[W13++],W6
	xor W7,[W13++],W7

	;if we are in decrypt mode then decrement the pointer instead of going forward
	btss _mode,#0x0
	sub #0x10,W13

	;Since P and the S tables do not have 
	;  any variable modification between the two steps, we can combine them into one step

	;lookup S8(B8) and S7(B7) (RAW dependencies removed, thus a little hard to read)

	mov #handle(S1P_table)+#0x8000,W12
	lsr W7,#0x6,W11	;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
	add W11,W12,W12
	mov #handle(S2P_table)+#0x8000,W8	;split of RAW dependency by preloading pointer for next block
	mov.d [W12],W10
	xor W10,W1,W1
	xor W11,W0,W0


	sl W7,#0x2,W11
	and #0xFF,W11
	add W11,W8,W8
	mov #handle(S3P_table)+#0x8000,W12	;split of RAW dependency by preloading pointer for next block
	mov.d [W8],W10
	xor W10,W1,W1
	xor W11,W0,W0


	lsr W6,#0x6,W11	;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
	add W11,W12,W12
	mov #handle(S4P_table)+#0x8000,W8	;split of RAW dependency by preloading pointer for next block
	mov.d [W12],W10
	xor W10,W1,W1
	xor W11,W0,W0


	sl W6,#0x2,W11
	and #0xFF,W11
	add W11,W8,W8
	mov #handle(S5P_table)+#0x8000,W12	;split of RAW dependency by preloading pointer for next block
	mov.d [W8],W10
	xor W10,W1,W1
	xor W11,W0,W0


	lsr W5,#0x6,W11	;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
	add W11,W12,W12
	mov #handle(S6P_table)+#0x8000,W8	;split of RAW dependency by preloading pointer for next block
	mov.d [W12],W10
	xor W10,W1,W1
	xor W11,W0,W0


	sl W5,#0x2,W11
	and #0xFF,W11
	add W11,W8,W8
	mov #handle(S7P_table)+#0x8000,W12	;split of RAW dependency by preloading pointer for next block
	mov.d [W8],W10
	xor W10,W1,W1
	xor W11,W0,W0


	lsr W4,#0x6,W11	;don't need to mask because we know this is in the format of [x x 0 1 2 3 4 5 6] where x = 0;
	add W11,W12,W12
	mov #handle(S8P_table)+#0x8000,W8	;split of RAW dependency by preloading pointer for next block
	mov.d [W12],W10
	xor W10,W1,W1
	xor W11,W0,W0


	sl W4,#0x2,W11
	and #0xFF,W11
	add W11,W8,W8
	clr W4				;split of RAW dependency by clearing W4 for next round
	mov.d [W8],W10
	xor W10,W1,W1
	xor W11,W0,W0

	;see if we are done with 16 rounds
	dec.b _count
	bra NZ,DESLoop

	;****************** end of the loop *******************

	;do final IP^-1 permutation
	clr _M+0
	clr _M+2
	clr _M+4
	clr _M+6

	btsc W3,#0x8
	bset.b _M+7,#0x7
	btsc W1,#0x8
	bset.b _M+7,#0x6
	btsc W3,#0x0
	bset.b _M+7,#0x5
	btsc W1,#0x0
	bset.b _M+7,#0x4
	btsc W2,#0x8
	bset.b _M+7,#0x3
	btsc W0,#0x8
	bset.b _M+7,#0x2
	btsc W2,#0x0
	bset.b _M+7,#0x1
	btsc W0,#0x0
	bset.b _M+7,#0x0

	btsc W3,#0x9
	bset.b _M+6,#0x7
	btsc W1,#0x9
	bset.b _M+6,#0x6
	btsc W3,#0x1
	bset.b _M+6,#0x5
	btsc W1,#0x1
	bset.b _M+6,#0x4
	btsc W2,#0x9
	bset.b _M+6,#0x3
	btsc W0,#0x9
	bset.b _M+6,#0x2
	btsc W2,#0x1
	bset.b _M+6,#0x1
	btsc W0,#0x1
	bset.b _M+6,#0x0

	btsc W3,#0xA
	bset.b _M+5,#0x7
	btsc W1,#0xA
	bset.b _M+5,#0x6
	btsc W3,#0x2
	bset.b _M+5,#0x5
	btsc W1,#0x2
	bset.b _M+5,#0x4
	btsc W2,#0xA
	bset.b _M+5,#0x3
	btsc W0,#0xA
	bset.b _M+5,#0x2
	btsc W2,#0x2
	bset.b _M+5,#0x1
	btsc W0,#0x2
	bset.b _M+5,#0x0

	btsc W3,#0xB
	bset.b _M+4,#0x7
	btsc W1,#0xB
	bset.b _M+4,#0x6
	btsc W3,#0x3
	bset.b _M+4,#0x5
	btsc W1,#0x3
	bset.b _M+4,#0x4
	btsc W2,#0xB
	bset.b _M+4,#0x3
	btsc W0,#0xB
	bset.b _M+4,#0x2
	btsc W2,#0x3
	bset.b _M+4,#0x1
	btsc W0,#0x3
	bset.b _M+4,#0x0

	btsc W3,#0xC
	bset.b _M+3,#0x7
	btsc W1,#0xC
	bset.b _M+3,#0x6
	btsc W3,#0x4
	bset.b _M+3,#0x5
	btsc W1,#0x4
	bset.b _M+3,#0x4
	btsc W2,#0xC
	bset.b _M+3,#0x3
	btsc W0,#0xC
	bset.b _M+3,#0x2
	btsc W2,#0x4
	bset.b _M+3,#0x1
	btsc W0,#0x4
	bset.b _M+3,#0x0

	btsc W3,#0xD
	bset.b _M+2,#0x7
	btsc W1,#0xD
	bset.b _M+2,#0x6
	btsc W3,#0x5
	bset.b _M+2,#0x5
	btsc W1,#0x5
	bset.b _M+2,#0x4
	btsc W2,#0xD
	bset.b _M+2,#0x3
	btsc W0,#0xD
	bset.b _M+2,#0x2
	btsc W2,#0x5
	bset.b _M+2,#0x1
	btsc W0,#0x5
	bset.b _M+2,#0x0

	btsc W3,#0xE
	bset.b _M+1,#0x7
	btsc W1,#0xE
	bset.b _M+1,#0x6
	btsc W3,#0x6
	bset.b _M+1,#0x5
	btsc W1,#0x6
	bset.b _M+1,#0x4
	btsc W2,#0xE
	bset.b _M+1,#0x3
	btsc W0,#0xE
	bset.b _M+1,#0x2
	btsc W2,#0x6
	bset.b _M+1,#0x1
	btsc W0,#0x6
	bset.b _M+1,#0x0

	btsc W3,#0xF
	bset.b _M+0,#0x7
	btsc W1,#0xF
	bset.b _M+0,#0x6
	btsc W3,#0x7
	bset.b _M+0,#0x5
	btsc W1,#0x7
	bset.b _M+0,#0x4
	btsc W2,#0xF
	bset.b _M+0,#0x3
	btsc W0,#0xF
	bset.b _M+0,#0x2
	btsc W2,#0x7
	bset.b _M+0,#0x1
	btsc W0,#0x7
	bset.b _M+0,#0x0
return


;this assumes that _Key has been updated before being called
;this assumes that _subKeyBlock is pointing to the LSB of a 48 word block that will hold the subkeys
_calcSubKeys:
	;clear old keys
	;BugFix1 - old loop was running 0x30 (48) times.  There are 64 words (128 bytes) of 
	;sub-keys that need to be calculated per block. 
	mov #0x40,W3
	mov _subKeyBlock,W4
ClearOldKeys:
	clr.w [W4++]
	dec W3,W3
	bra NZ,ClearOldKeys

	;get ready to calculate new permuted Key (Kp)
	clr	_Kp
	clr _Kp+2
	clr _Kp+4
	clr.b _Kp+6

	;Kp = PC^-1[Key]
	btsc _Key+0,#0x7
	bset _Kp+6,#0x7
	btsc _Key+1,#0x7
	bset _Kp+6,#0x6
	btsc _Key+2,#0x7
	bset _Kp+6,#0x5
	btsc _Key+3,#0x7
	bset _Kp+6,#0x4
	btsc _Key+4,#0x7
	bset _Kp+6,#0x3
	btsc _Key+5,#0x7
	bset _Kp+6,#0x2
	btsc _Key+6,#0x7
	bset _Kp+6,#0x1
	btsc _Key+7,#0x7
	bset _Kp+6,#0x0

	btsc _Key+0,#0x6
	bset _Kp+5,#0x7
	btsc _Key+1,#0x6
	bset _Kp+5,#0x6
	btsc _Key+2,#0x6
	bset _Kp+5,#0x5
	btsc _Key+3,#0x6
	bset _Kp+5,#0x4
	btsc _Key+4,#0x6
	bset _Kp+5,#0x3
	btsc _Key+5,#0x6
	bset _Kp+5,#0x2
	btsc _Key+6,#0x6
	bset _Kp+5,#0x1
	btsc _Key+7,#0x6
	bset _Kp+5,#0x0

	btsc _Key+0,#0x5
	bset _Kp+4,#0x7
	btsc _Key+1,#0x5
	bset _Kp+4,#0x6
	btsc _Key+2,#0x5
	bset _Kp+4,#0x5
	btsc _Key+3,#0x5
	bset _Kp+4,#0x4
	btsc _Key+4,#0x5
	bset _Kp+4,#0x3
	btsc _Key+5,#0x5
	bset _Kp+4,#0x2
	btsc _Key+6,#0x5
	bset _Kp+4,#0x1
	btsc _Key+7,#0x5
	bset _Kp+4,#0x0

	btsc _Key+0,#0x4
	bset _Kp+3,#0x7
	btsc _Key+1,#0x4
	bset _Kp+3,#0x6
	btsc _Key+2,#0x4
	bset _Kp+3,#0x5
	btsc _Key+3,#0x4
	bset _Kp+3,#0x4

	btsc _Key+0,#0x1
	bset _Kp+3,#0x3
	btsc _Key+1,#0x1
	bset _Kp+3,#0x2
	btsc _Key+2,#0x1
	bset _Kp+3,#0x1
	btsc _Key+3,#0x1
	bset _Kp+3,#0x0
	btsc _Key+4,#0x1
	bset _Kp+2,#0x7
	btsc _Key+5,#0x1
	bset _Kp+2,#0x6
	btsc _Key+6,#0x1
	bset _Kp+2,#0x5
	btsc _Key+7,#0x1
	bset _Kp+2,#0x4

	btsc _Key+0,#0x2
	bset _Kp+2,#0x3
	btsc _Key+1,#0x2
	bset _Kp+2,#0x2
	btsc _Key+2,#0x2
	bset _Kp+2,#0x1
	btsc _Key+3,#0x2
	bset _Kp+2,#0x0
	btsc _Key+4,#0x2
	bset _Kp+1,#0x7
	btsc _Key+5,#0x2
	bset _Kp+1,#0x6
	btsc _Key+6,#0x2
	bset _Kp+1,#0x5
	btsc _Key+7,#0x2
	bset _Kp+1,#0x4

	btsc _Key+0,#0x3
	bset _Kp+1,#0x3
	btsc _Key+1,#0x3
	bset _Kp+1,#0x2
	btsc _Key+2,#0x3
	bset _Kp+1,#0x1
	btsc _Key+3,#0x3
	bset _Kp+1,#0x0
	btsc _Key+4,#0x3
	bset _Kp+0,#0x7
	btsc _Key+5,#0x3
	bset _Kp+0,#0x6
	btsc _Key+6,#0x3
	bset _Kp+0,#0x5
	btsc _Key+7,#0x3
	bset _Kp+0,#0x4

	;BugFix1 - incorrect key calculation in the K=>K+ permutation
	;old values
;	btsc _Key+0,#0x4
;	bset _Kp+0,#0x3         ;K+[53] = K[60] !! should be K+[53] = K[28] (_Key+4,#0x4)
;	btsc _Key+1,#0x4
;	bset _Kp+0,#0x2         ;K+[54] = K[52] !! should be K+[54] = K[20] (_Key+5,#0x4)
;	btsc _Key+2,#0x4
;	bset _Kp+0,#0x1         ;K+[55] = K[44] !! should be K+[55] = K[12] (_Key+6,#0x4)
;	btsc _Key+3,#0x4
;	bset _Kp+0,#0x0         ;K+[56] = K[36] !! should be K+[56] = K[4]  (_Key+7,#0x4)

	;new values
	btsc _Key+4,#0x4
	bset _Kp+0,#0x3         ;K+[53] = K[28] 
	btsc _Key+5,#0x4
	bset _Kp+0,#0x2         ;K+[54] = K[20] 
	btsc _Key+6,#0x4
	bset _Kp+0,#0x1         ;K+[55] = K[12]
	btsc _Key+7,#0x4
	bset _Kp+0,#0x0         ;K+[56] = K[4]

	;prepare to calculate Kn
	mov #0x8000,W3
	mov _subKeyBlock,W4
KeyScheduler:	
	;rotate Cn and Dn
	bclr SR,#0x0
	rlc _Kp+0
	rlc _Kp+2
	rlc _Kp+4
	rlc.b _Kp+6
	btsc _Kp+3,#0x4	
	bset _Kp+0,#0x0	
	bclr _Kp+3,#0x4
	btsc SR,#0x0	
	bset _Kp+3,#0x4
	
	mov #0b1100000010000001,W5
	and W5,W3,W5
	bra NZ,NoSecondShift

	;rotate Cn and Dn
	bclr SR,#0x0
	rlc _Kp+0
	rlc _Kp+2
	rlc _Kp+4
	rlc.b _Kp+6
	btsc _Kp+3,#0x4	
	bset _Kp+0,#0x0	
	bclr _Kp+3,#0x4
	btsc SR,#0x0	
	bset _Kp+3,#0x4

NoSecondShift:
	;calc PC^-2 of Cn/Dn

	;for variables that exist in 48
	;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
	; 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0
	;[        5            ][        4             ][        3             ][        2             ][          1           ][          0             ]
	;for variables that exist in 56
	;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56
	; 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0
	;[        6            ][        5             ][        4             ][        3             ][          2           ][          1            ][          0             ]
	;for variables that exist in 64
	;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64
	; 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0
	;[        7            ][        6             ][        5             ][         4            ][          3           ][          2            ][          1         ][          0             ]


	;store the results in _Kn
	;stored as [x x 1 2 3 4 5 6] so that S substitution is easier.
	btsc _Kp+3,#0x0
	bset.b [W4],#0x0
	btsc _Kp+3,#0x3
	bset.b [W4],#0x1
	btsc _Kp+2,#0x4
	bset.b [W4],#0x2
	btsc _Kp+0,#0x6
	bset.b [W4],#0x3
	btsc _Kp+1,#0x6
	bset.b [W4],#0x4
	btsc _Kp+1,#0x2
	bset.b [W4],#0x5

	inc W4,W4

	btsc _Kp+0,#0x3
	bset.b [W4],#0x0
	btsc _Kp+2,#0x6
	bset.b [W4],#0x1
	btsc _Kp+0,#0x0
	bset.b [W4],#0x2
	btsc _Kp+2,#0x1
	bset.b [W4],#0x3
	btsc _Kp+0,#0x7
	bset.b [W4],#0x4
	btsc _Kp+1,#0x4
	bset.b [W4],#0x5

	inc W4,W4

	btsc _Kp+1,#0x0
	bset.b [W4],#0x0
	btsc _Kp+2,#0x7
	bset.b [W4],#0x1
	btsc _Kp+1,#0x3
	bset.b [W4],#0x2
	btsc _Kp+0,#0x5
	bset.b [W4],#0x3	
	btsc _Kp+2,#0x0
	bset.b [W4],#0x4
	btsc _Kp+3,#0x2
	bset.b [W4],#0x5

	inc W4,W4

	btsc _Kp+0,#0x1
	bset.b [W4],#0x0
	btsc _Kp+1,#0x1
	bset.b [W4],#0x1
	btsc _Kp+2,#0x3
	bset.b [W4],#0x2
	btsc _Kp+3,#0x1
	bset.b [W4],#0x3
	btsc _Kp+0,#0x4
	bset.b [W4],#0x4
	btsc _Kp+1,#0x7
	bset.b [W4],#0x5

	inc W4,W4

	btsc _Kp+6,#0x6
	bset.b [W4],#0x0
	btsc _Kp+5,#0x3
	bset.b [W4],#0x1
	btsc _Kp+4,#0x4
	bset.b [W4],#0x2
	btsc _Kp+3,#0x5
	bset.b [W4],#0x3
	btsc _Kp+6,#0x1
	bset.b [W4],#0x4
	btsc _Kp+5,#0x0
	bset.b [W4],#0x5

	inc W4,W4

	btsc _Kp+6,#0x0
	bset.b [W4],#0x0
	btsc _Kp+3,#0x6
	bset.b [W4],#0x1
	btsc _Kp+6,#0x4
	bset.b [W4],#0x2
	btsc _Kp+5,#0x4
	bset.b [W4],#0x3
	btsc _Kp+4,#0x5
	bset.b [W4],#0x4
	btsc _Kp+4,#0x1
	bset.b [W4],#0x5

	inc W4,W4

	btsc _Kp+5,#0x6
	bset.b [W4],#0x0
	btsc _Kp+4,#0x3
	bset.b [W4],#0x1
	btsc _Kp+6,#0x2
	bset.b [W4],#0x2
	btsc _Kp+5,#0x1
	bset.b [W4],#0x3
	btsc _Kp+3,#0x4
	bset.b [W4],#0x4
	btsc _Kp+6,#0x5
	bset.b [W4],#0x5

	inc W4,W4

	btsc _Kp+6,#0x3
	bset.b [W4],#0x0
	btsc _Kp+6,#0x7
	bset.b [W4],#0x1
	btsc _Kp+4,#0x0
	bset.b [W4],#0x2
	btsc _Kp+5,#0x5
	bset.b [W4],#0x3
	btsc _Kp+4,#0x7
	bset.b [W4],#0x4
	btsc _Kp+5,#0x2
	bset.b [W4],#0x5

	inc W4,W4

	;see if we are done with 16 rounds
	bclr SR,#0x0
	rrc W3,W3
	bra NZ,KeyScheduler

return










;       0x00,01,02,03,04,05,06,07,08,09,0a,0b,0c,0d,0e,0f,10,11,12,13,14,15,16,17,18,19,1a,1b,1c,1d,1e,1f,20,21,22,23,24,25,26,27,28,29,2a,2b,2c,2d,2e,2f,30,31,32,33,34,35,36,37,38,39,3a,3b,3c,3d,3e,3f
;          0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63
S8: .byte 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7,  1, 4, 10, 12,  9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8,  2, 13, 0, 15,  6, 12, 10, 9, 13, 0, 15, 3,  3, 5,  5, 6, 8, 11
S7: .byte 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3,  9, 5,  7, 12,  5, 2, 10, 15,  6, 8,  1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4,  7, 10, 14, 7, 10, 9, 15, 5,  6, 0,  8, 15,   0, 14,  5, 2,  9, 3,  2, 12
S6: .byte 12,  10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12,  6, 9, 8, 5, 0, 6, 13, 1, 3, 13,  4, 14,  14, 0,  7, 11,  5, 3, 11, 8, 9, 4, 14, 3, 15, 2,  5, 12,  2, 9,  8, 5, 12, 15,  3, 10, 7, 11,  0, 14,  4, 1, 10, 7,  1, 6, 13, 0, 11, 8,  6, 13
S5: .byte 2, 14,12,11,  4,2,  1,12,  7,4, 10,7, 11,13,  6,1, 8,5,  5,0,  3,15, 15,10, 13,3,  0,9, 14,8,  9,6, 4,11,  2,8,  1,12, 11,7, 10,1, 13,14,  7,2,  8,13, 15,6,  9,15, 12,0,  5,9,  6,10,  3,4,  0,5, 14,3
S4: .byte 7, 13,13,8, 14,11,  3,5,  0,6,  6,15,  9,0, 10,3, 1,4,  2,7,  8,2,  5,12, 11,1, 12,10,  4,14, 15,9, 10,3,  6,15,  9,0,  0,6, 12,10, 11,1,  7,13, 13,8, 15,9,  1,4,  3,5, 14,11,  5,12,  2,7,  8,2,  4,14
S3: .byte 10,13,  0,7,  9,0, 14,9,  6,3,  3,4, 15,6,  5,10,  1,2, 13,8, 12,5,  7,14, 11,12,  4,11,  2,15,  8,1, 13,1,  6,10,  4,13,  9,0,  8,6, 15,9,  3,8,  0,7, 11,4,  1,15,  2,14, 12,3,  5,11, 10,5, 14,2,  7,12
S2: .byte 15,3,  1,13,  8,4, 14,7,  6,15, 11,2,  3,8,  4,14, 9,12,  7,0,  2,1, 13,10, 12,6,  0,9,  5,11, 10,5,0,13, 14,8,  7,10, 11,1, 10,3,  4,15, 13,4,  1,2, 5,11,  8,6, 12,7,  6,12,  9,0,  3,5,  2,14, 15,9
S1:	.byte 14, 0, 4,15,13, 7, 1,4 , 2,14,15, 2,11,13, 8, 1, 3,10,10, 6, 6,12,12,11, 5, 9, 9, 5, 0, 3, 7, 8, 4,15, 1,12,14, 8, 8, 2,13, 4, 6, 9, 2, 1,11, 7,15, 5,12,11, 9, 3, 7,14, 3,10,10, 0, 5, 6, 0,13

E_Table:
	.byte 0x00, 0x00
	.byte 0x02, 0x00
	.byte 0x04, 0x00
	.byte 0x06, 0x00
	.byte 0x08, 0x00
	.byte 0x0A, 0x00
	.byte 0x0C, 0x00
	.byte 0x0E, 0x00
	.byte 0x10, 0x01
	.byte 0x12, 0x01
	.byte 0x14, 0x01
	.byte 0x16, 0x01
	.byte 0x18, 0x01
	.byte 0x1A, 0x01
	.byte 0x1C, 0x01
	.byte 0x1E, 0x01
	.byte 0x20, 0x02
	.byte 0x22, 0x02
	.byte 0x24, 0x02
	.byte 0x26, 0x02
	.byte 0x28, 0x02
	.byte 0x2A, 0x02
	.byte 0x2C, 0x02
	.byte 0x2E, 0x02
	.byte 0x30, 0x03
	.byte 0x32, 0x03
	.byte 0x34, 0x03
	.byte 0x36, 0x03
	.byte 0x38, 0x03
	.byte 0x3A, 0x03
	.byte 0x3C, 0x03
	.byte 0x3E, 0x03
	.byte 0x00, 0x04
	.byte 0x02, 0x04
	.byte 0x04, 0x04
	.byte 0x06, 0x04
	.byte 0x08, 0x04
	.byte 0x0A, 0x04
	.byte 0x0C, 0x04
	.byte 0x0E, 0x04
	.byte 0x10, 0x05
	.byte 0x12, 0x05
	.byte 0x14, 0x05
	.byte 0x16, 0x05
	.byte 0x18, 0x05
	.byte 0x1A, 0x05
	.byte 0x1C, 0x05
	.byte 0x1E, 0x05
	.byte 0x20, 0x06
	.byte 0x22, 0x06
	.byte 0x24, 0x06
	.byte 0x26, 0x06
	.byte 0x28, 0x06
	.byte 0x2A, 0x06
	.byte 0x2C, 0x06
	.byte 0x2E, 0x06
	.byte 0x30, 0x07
	.byte 0x32, 0x07
	.byte 0x34, 0x07
	.byte 0x36, 0x07
	.byte 0x38, 0x07
	.byte 0x3A, 0x07
	.byte 0x3C, 0x07
	.byte 0x3E, 0x07
	.byte 0x00, 0x08
	.byte 0x02, 0x08
	.byte 0x04, 0x08
	.byte 0x06, 0x08
	.byte 0x08, 0x08
	.byte 0x0A, 0x08
	.byte 0x0C, 0x08
	.byte 0x0E, 0x08
	.byte 0x10, 0x09
	.byte 0x12, 0x09
	.byte 0x14, 0x09
	.byte 0x16, 0x09
	.byte 0x18, 0x09
	.byte 0x1A, 0x09
	.byte 0x1C, 0x09
	.byte 0x1E, 0x09
	.byte 0x20, 0x0A
	.byte 0x22, 0x0A
	.byte 0x24, 0x0A
	.byte 0x26, 0x0A
	.byte 0x28, 0x0A
	.byte 0x2A, 0x0A
	.byte 0x2C, 0x0A
	.byte 0x2E, 0x0A
	.byte 0x30, 0x0B
	.byte 0x32, 0x0B
	.byte 0x34, 0x0B
	.byte 0x36, 0x0B
	.byte 0x38, 0x0B
	.byte 0x3A, 0x0B
	.byte 0x3C, 0x0B
	.byte 0x3E, 0x0B
	.byte 0x00, 0x0C
	.byte 0x02, 0x0C
	.byte 0x04, 0x0C
	.byte 0x06, 0x0C
	.byte 0x08, 0x0C
	.byte 0x0A, 0x0C
	.byte 0x0C, 0x0C
	.byte 0x0E, 0x0C
	.byte 0x10, 0x0D
	.byte 0x12, 0x0D
	.byte 0x14, 0x0D
	.byte 0x16, 0x0D
	.byte 0x18, 0x0D
	.byte 0x1A, 0x0D
	.byte 0x1C, 0x0D
	.byte 0x1E, 0x0D
	.byte 0x20, 0x0E
	.byte 0x22, 0x0E
	.byte 0x24, 0x0E
	.byte 0x26, 0x0E
	.byte 0x28, 0x0E
	.byte 0x2A, 0x0E
	.byte 0x2C, 0x0E
	.byte 0x2E, 0x0E
	.byte 0x30, 0x0F
	.byte 0x32, 0x0F
	.byte 0x34, 0x0F
	.byte 0x36, 0x0F
	.byte 0x38, 0x0F
	.byte 0x3A, 0x0F
	.byte 0x3C, 0x0F
	.byte 0x3E, 0x0F
	.byte 0x00, 0x10
	.byte 0x02, 0x10
	.byte 0x04, 0x10
	.byte 0x06, 0x10
	.byte 0x08, 0x10
	.byte 0x0A, 0x10
	.byte 0x0C, 0x10
	.byte 0x0E, 0x10
	.byte 0x10, 0x11
	.byte 0x12, 0x11
	.byte 0x14, 0x11
	.byte 0x16, 0x11
	.byte 0x18, 0x11
	.byte 0x1A, 0x11
	.byte 0x1C, 0x11
	.byte 0x1E, 0x11
	.byte 0x20, 0x12
	.byte 0x22, 0x12
	.byte 0x24, 0x12
	.byte 0x26, 0x12
	.byte 0x28, 0x12
	.byte 0x2A, 0x12
	.byte 0x2C, 0x12
	.byte 0x2E, 0x12
	.byte 0x30, 0x13
	.byte 0x32, 0x13
	.byte 0x34, 0x13
	.byte 0x36, 0x13
	.byte 0x38, 0x13
	.byte 0x3A, 0x13
	.byte 0x3C, 0x13
	.byte 0x3E, 0x13
	.byte 0x00, 0x14
	.byte 0x02, 0x14
	.byte 0x04, 0x14
	.byte 0x06, 0x14
	.byte 0x08, 0x14
	.byte 0x0A, 0x14
	.byte 0x0C, 0x14
	.byte 0x0E, 0x14
	.byte 0x10, 0x15
	.byte 0x12, 0x15
	.byte 0x14, 0x15
	.byte 0x16, 0x15
	.byte 0x18, 0x15
	.byte 0x1A, 0x15
	.byte 0x1C, 0x15
	.byte 0x1E, 0x15
	.byte 0x20, 0x16
	.byte 0x22, 0x16
	.byte 0x24, 0x16
	.byte 0x26, 0x16
	.byte 0x28, 0x16
	.byte 0x2A, 0x16
	.byte 0x2C, 0x16
	.byte 0x2E, 0x16
	.byte 0x30, 0x17
	.byte 0x32, 0x17
	.byte 0x34, 0x17
	.byte 0x36, 0x17
	.byte 0x38, 0x17
	.byte 0x3A, 0x17
	.byte 0x3C, 0x17
	.byte 0x3E, 0x17
	.byte 0x00, 0x18
	.byte 0x02, 0x18
	.byte 0x04, 0x18
	.byte 0x06, 0x18
	.byte 0x08, 0x18
	.byte 0x0A, 0x18
	.byte 0x0C, 0x18
	.byte 0x0E, 0x18
	.byte 0x10, 0x19
	.byte 0x12, 0x19
	.byte 0x14, 0x19
	.byte 0x16, 0x19
	.byte 0x18, 0x19
	.byte 0x1A, 0x19
	.byte 0x1C, 0x19
	.byte 0x1E, 0x19
	.byte 0x20, 0x1A
	.byte 0x22, 0x1A
	.byte 0x24, 0x1A
	.byte 0x26, 0x1A
	.byte 0x28, 0x1A
	.byte 0x2A, 0x1A
	.byte 0x2C, 0x1A
	.byte 0x2E, 0x1A
	.byte 0x30, 0x1B
	.byte 0x32, 0x1B
	.byte 0x34, 0x1B
	.byte 0x36, 0x1B
	.byte 0x38, 0x1B
	.byte 0x3A, 0x1B
	.byte 0x3C, 0x1B
	.byte 0x3E, 0x1B
	.byte 0x00, 0x1C
	.byte 0x02, 0x1C
	.byte 0x04, 0x1C
	.byte 0x06, 0x1C
	.byte 0x08, 0x1C
	.byte 0x0A, 0x1C
	.byte 0x0C, 0x1C
	.byte 0x0E, 0x1C
	.byte 0x10, 0x1D
	.byte 0x12, 0x1D
	.byte 0x14, 0x1D
	.byte 0x16, 0x1D
	.byte 0x18, 0x1D
	.byte 0x1A, 0x1D
	.byte 0x1C, 0x1D
	.byte 0x1E, 0x1D
	.byte 0x20, 0x1E
	.byte 0x22, 0x1E
	.byte 0x24, 0x1E
	.byte 0x26, 0x1E
	.byte 0x28, 0x1E
	.byte 0x2A, 0x1E
	.byte 0x2C, 0x1E
	.byte 0x2E, 0x1E
	.byte 0x30, 0x1F
	.byte 0x32, 0x1F
	.byte 0x34, 0x1F
	.byte 0x36, 0x1F
	.byte 0x38, 0x1F
	.byte 0x3A, 0x1F
	.byte 0x3C, 0x1F
	.byte 0x3E, 0x1F
	
	;S1P table
S1P_table:
.byte 0x80,0x00,0x00,0x82
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x80
.byte 0x80,0x00,0x02,0x82
.byte 0x80,0x00,0x02,0x80
.byte 0x00,0x00,0x02,0x82
.byte 0x00,0x00,0x02,0x00
.byte 0x00,0x00,0x00,0x80
.byte 0x00,0x00,0x00,0x02
.byte 0x80,0x00,0x00,0x82
.byte 0x80,0x00,0x02,0x82
.byte 0x00,0x00,0x00,0x02
.byte 0x80,0x00,0x02,0x02
.byte 0x80,0x00,0x02,0x80
.byte 0x80,0x00,0x00,0x00
.byte 0x00,0x00,0x02,0x00
.byte 0x00,0x00,0x02,0x02
.byte 0x80,0x00,0x00,0x02
.byte 0x80,0x00,0x00,0x02
.byte 0x00,0x00,0x00,0x82
.byte 0x00,0x00,0x00,0x82
.byte 0x80,0x00,0x00,0x80
.byte 0x80,0x00,0x00,0x80
.byte 0x80,0x00,0x02,0x02
.byte 0x00,0x00,0x02,0x80
.byte 0x80,0x00,0x02,0x00
.byte 0x80,0x00,0x02,0x00
.byte 0x00,0x00,0x02,0x80
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x02,0x02
.byte 0x00,0x00,0x02,0x82
.byte 0x80,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x80
.byte 0x80,0x00,0x02,0x82
.byte 0x00,0x00,0x02,0x00
.byte 0x80,0x00,0x00,0x80
.byte 0x80,0x00,0x00,0x82
.byte 0x80,0x00,0x00,0x00
.byte 0x80,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x02
.byte 0x80,0x00,0x02,0x80
.byte 0x00,0x00,0x00,0x80
.byte 0x00,0x00,0x00,0x82
.byte 0x80,0x00,0x02,0x00
.byte 0x00,0x00,0x00,0x02
.byte 0x00,0x00,0x02,0x00
.byte 0x80,0x00,0x02,0x02
.byte 0x00,0x00,0x02,0x82
.byte 0x80,0x00,0x02,0x82
.byte 0x00,0x00,0x02,0x80
.byte 0x80,0x00,0x00,0x80
.byte 0x80,0x00,0x02,0x02
.byte 0x80,0x00,0x02,0x00
.byte 0x00,0x00,0x02,0x02
.byte 0x00,0x00,0x02,0x82
.byte 0x80,0x00,0x00,0x82
.byte 0x00,0x00,0x02,0x02
.byte 0x80,0x00,0x00,0x02
.byte 0x80,0x00,0x00,0x02
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x02,0x80
.byte 0x00,0x00,0x00,0x82
.byte 0x00,0x00,0x00,0x00
.byte 0x80,0x00,0x02,0x80
S2P_table:
.byte 0x08,0x40,0x10,0x40
.byte 0x00,0x40,0x00,0x40
.byte 0x00,0x00,0x00,0x40
.byte 0x08,0x00,0x10,0x40
.byte 0x08,0x00,0x00,0x00
.byte 0x00,0x00,0x10,0x00
.byte 0x08,0x40,0x10,0x00
.byte 0x00,0x40,0x10,0x40
.byte 0x00,0x40,0x10,0x00
.byte 0x08,0x40,0x10,0x40
.byte 0x08,0x40,0x00,0x40
.byte 0x00,0x40,0x00,0x00
.byte 0x00,0x40,0x00,0x40
.byte 0x08,0x00,0x00,0x00
.byte 0x00,0x00,0x10,0x00
.byte 0x08,0x40,0x10,0x00
.byte 0x08,0x00,0x00,0x40
.byte 0x08,0x00,0x10,0x00
.byte 0x00,0x40,0x10,0x40
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x40,0x00,0x00
.byte 0x00,0x00,0x00,0x40
.byte 0x08,0x00,0x10,0x40
.byte 0x08,0x40,0x00,0x00
.byte 0x08,0x00,0x10,0x00
.byte 0x00,0x40,0x10,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x08,0x00,0x00,0x40
.byte 0x00,0x00,0x10,0x40
.byte 0x08,0x40,0x00,0x40
.byte 0x08,0x40,0x00,0x00
.byte 0x00,0x00,0x10,0x40
.byte 0x00,0x00,0x00,0x00
.byte 0x08,0x00,0x10,0x40
.byte 0x08,0x40,0x10,0x00
.byte 0x08,0x00,0x00,0x00
.byte 0x00,0x40,0x10,0x40
.byte 0x08,0x40,0x00,0x00
.byte 0x08,0x40,0x00,0x40
.byte 0x00,0x00,0x00,0x40
.byte 0x08,0x40,0x00,0x00
.byte 0x00,0x40,0x00,0x40
.byte 0x00,0x00,0x10,0x00
.byte 0x08,0x40,0x10,0x40
.byte 0x08,0x00,0x10,0x40
.byte 0x00,0x00,0x10,0x00
.byte 0x00,0x00,0x00,0x40
.byte 0x00,0x40,0x00,0x00
.byte 0x00,0x00,0x10,0x40
.byte 0x08,0x40,0x00,0x40
.byte 0x08,0x00,0x00,0x00
.byte 0x00,0x40,0x10,0x00
.byte 0x08,0x00,0x10,0x00
.byte 0x00,0x40,0x10,0x40
.byte 0x00,0x40,0x10,0x00
.byte 0x08,0x00,0x10,0x00
.byte 0x08,0x00,0x00,0x40
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x40,0x00,0x40
.byte 0x00,0x00,0x10,0x40
.byte 0x00,0x40,0x00,0x00
.byte 0x08,0x40,0x10,0x00
.byte 0x08,0x40,0x10,0x40
.byte 0x08,0x00,0x00,0x40
S3P_table:
.byte 0x00,0x00,0x04,0x01
.byte 0x01,0x04,0x00,0x01
.byte 0x00,0x00,0x00,0x00
.byte 0x01,0x04,0x04,0x00
.byte 0x00,0x04,0x00,0x01
.byte 0x00,0x00,0x00,0x00
.byte 0x01,0x00,0x04,0x01
.byte 0x00,0x04,0x00,0x01
.byte 0x01,0x00,0x04,0x00
.byte 0x00,0x04,0x04,0x00
.byte 0x00,0x04,0x04,0x00
.byte 0x01,0x00,0x00,0x00
.byte 0x01,0x04,0x04,0x01
.byte 0x01,0x00,0x04,0x00
.byte 0x01,0x04,0x00,0x00
.byte 0x00,0x00,0x04,0x01
.byte 0x00,0x04,0x00,0x00
.byte 0x00,0x00,0x04,0x00
.byte 0x01,0x04,0x00,0x01
.byte 0x00,0x00,0x00,0x01
.byte 0x01,0x00,0x00,0x01
.byte 0x01,0x04,0x00,0x00
.byte 0x01,0x04,0x04,0x00
.byte 0x01,0x00,0x04,0x01
.byte 0x00,0x04,0x04,0x01
.byte 0x01,0x00,0x00,0x01
.byte 0x01,0x00,0x00,0x00
.byte 0x00,0x04,0x04,0x01
.byte 0x00,0x00,0x04,0x00
.byte 0x01,0x04,0x04,0x01
.byte 0x00,0x00,0x00,0x01
.byte 0x00,0x04,0x00,0x00
.byte 0x01,0x04,0x00,0x01
.byte 0x00,0x04,0x00,0x00
.byte 0x01,0x00,0x04,0x00
.byte 0x00,0x00,0x04,0x01
.byte 0x01,0x00,0x00,0x00
.byte 0x01,0x04,0x00,0x01
.byte 0x00,0x04,0x00,0x01
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x01
.byte 0x01,0x00,0x04,0x00
.byte 0x01,0x04,0x04,0x01
.byte 0x00,0x04,0x00,0x01
.byte 0x00,0x04,0x04,0x00
.byte 0x00,0x00,0x00,0x01
.byte 0x00,0x00,0x00,0x00
.byte 0x01,0x04,0x04,0x00
.byte 0x00,0x04,0x04,0x01
.byte 0x01,0x00,0x00,0x00
.byte 0x00,0x04,0x00,0x00
.byte 0x01,0x04,0x04,0x01
.byte 0x00,0x00,0x04,0x00
.byte 0x01,0x00,0x04,0x01
.byte 0x01,0x00,0x00,0x01
.byte 0x00,0x04,0x04,0x00
.byte 0x01,0x04,0x00,0x00
.byte 0x00,0x04,0x04,0x01
.byte 0x00,0x00,0x04,0x01
.byte 0x01,0x04,0x00,0x00
.byte 0x01,0x00,0x04,0x01
.byte 0x00,0x00,0x04,0x00
.byte 0x01,0x04,0x04,0x00
.byte 0x01,0x00,0x00,0x01
S4P_table:
.byte 0x40,0x80,0x00,0x10
.byte 0x00,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x10
.byte 0x00,0x00,0x40,0x00
.byte 0x40,0x00,0x40,0x10
.byte 0x40,0x80,0x40,0x00
.byte 0x40,0x80,0x00,0x00
.byte 0x00,0x80,0x00,0x10
.byte 0x00,0x00,0x00,0x00
.byte 0x40,0x00,0x00,0x10
.byte 0x40,0x00,0x00,0x10
.byte 0x40,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x40,0x00,0x40,0x00
.byte 0x40,0x80,0x00,0x00
.byte 0x00,0x80,0x00,0x00
.byte 0x00,0x00,0x00,0x10
.byte 0x40,0x00,0x00,0x00
.byte 0x40,0x80,0x00,0x10
.byte 0x00,0x00,0x40,0x00
.byte 0x40,0x00,0x00,0x00
.byte 0x00,0x80,0x00,0x10
.byte 0x00,0x00,0x40,0x10
.byte 0x40,0x80,0x40,0x00
.byte 0x00,0x80,0x00,0x00
.byte 0x00,0x00,0x40,0x10
.byte 0x40,0x00,0x40,0x00
.byte 0x00,0x00,0x00,0x10
.byte 0x40,0x00,0x40,0x10
.byte 0x40,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x00
.byte 0x40,0x00,0x40,0x00
.byte 0x40,0x80,0x00,0x00
.byte 0x40,0x00,0x00,0x10
.byte 0x40,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x40,0x00,0x00,0x10
.byte 0x00,0x00,0x40,0x10
.byte 0x40,0x00,0x40,0x00
.byte 0x40,0x80,0x40,0x00
.byte 0x00,0x80,0x00,0x00
.byte 0x40,0x80,0x00,0x10
.byte 0x00,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x10
.byte 0x00,0x00,0x40,0x00
.byte 0x40,0x80,0x40,0x10
.byte 0x00,0x80,0x40,0x00
.byte 0x00,0x80,0x00,0x00
.byte 0x00,0x00,0x00,0x10
.byte 0x40,0x80,0x00,0x00
.byte 0x00,0x80,0x00,0x10
.byte 0x40,0x00,0x40,0x10
.byte 0x40,0x80,0x40,0x00
.byte 0x00,0x80,0x00,0x10
.byte 0x00,0x00,0x40,0x10
.byte 0x40,0x00,0x00,0x00
.byte 0x40,0x80,0x00,0x10
.byte 0x00,0x00,0x40,0x00
.byte 0x40,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x10
.byte 0x40,0x00,0x40,0x10
S5P_table:
.byte 0x00,0x00,0x80,0x00
.byte 0x04,0x01,0x80,0x00
.byte 0x04,0x01,0x00,0x00
.byte 0x00,0x21,0x80,0x00
.byte 0x04,0x00,0x00,0x00
.byte 0x00,0x00,0x80,0x00
.byte 0x00,0x20,0x00,0x00
.byte 0x04,0x01,0x00,0x00
.byte 0x04,0x20,0x80,0x00
.byte 0x04,0x00,0x00,0x00
.byte 0x00,0x01,0x80,0x00
.byte 0x04,0x20,0x80,0x00
.byte 0x00,0x21,0x80,0x00
.byte 0x04,0x21,0x00,0x00
.byte 0x04,0x00,0x80,0x00
.byte 0x00,0x20,0x00,0x00
.byte 0x00,0x01,0x00,0x00
.byte 0x04,0x20,0x00,0x00
.byte 0x04,0x20,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x20,0x80,0x00
.byte 0x04,0x21,0x80,0x00
.byte 0x04,0x21,0x80,0x00
.byte 0x00,0x01,0x80,0x00
.byte 0x04,0x21,0x00,0x00
.byte 0x00,0x20,0x80,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x21,0x00,0x00
.byte 0x04,0x01,0x80,0x00
.byte 0x00,0x01,0x00,0x00
.byte 0x00,0x21,0x00,0x00
.byte 0x04,0x00,0x80,0x00
.byte 0x04,0x00,0x00,0x00
.byte 0x00,0x21,0x80,0x00
.byte 0x00,0x00,0x80,0x00
.byte 0x00,0x01,0x00,0x00
.byte 0x00,0x20,0x00,0x00
.byte 0x04,0x01,0x00,0x00
.byte 0x00,0x21,0x80,0x00
.byte 0x04,0x20,0x80,0x00
.byte 0x00,0x01,0x80,0x00
.byte 0x00,0x20,0x00,0x00
.byte 0x04,0x21,0x00,0x00
.byte 0x04,0x01,0x80,0x00
.byte 0x04,0x20,0x80,0x00
.byte 0x00,0x00,0x80,0x00
.byte 0x00,0x01,0x00,0x00
.byte 0x04,0x21,0x00,0x00
.byte 0x04,0x21,0x80,0x00
.byte 0x04,0x00,0x80,0x00
.byte 0x00,0x21,0x00,0x00
.byte 0x04,0x21,0x80,0x00
.byte 0x04,0x01,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x04,0x20,0x00,0x00
.byte 0x00,0x21,0x00,0x00
.byte 0x04,0x00,0x80,0x00
.byte 0x00,0x01,0x80,0x00
.byte 0x00,0x20,0x80,0x00
.byte 0x04,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x04,0x20,0x00,0x00
.byte 0x04,0x01,0x80,0x00
.byte 0x00,0x20,0x80,0x00
S6P_table:
.byte 0x00,0x10,0x08,0x00
.byte 0x20,0x10,0x00,0x00
.byte 0x00,0x00,0x00,0x20
.byte 0x20,0x10,0x08,0x20
.byte 0x20,0x10,0x00,0x00
.byte 0x00,0x00,0x08,0x00
.byte 0x20,0x10,0x08,0x20
.byte 0x20,0x00,0x00,0x00
.byte 0x00,0x10,0x00,0x20
.byte 0x20,0x00,0x08,0x20
.byte 0x20,0x00,0x00,0x00
.byte 0x00,0x10,0x08,0x00
.byte 0x20,0x00,0x08,0x00
.byte 0x00,0x10,0x00,0x20
.byte 0x00,0x10,0x00,0x00
.byte 0x00,0x00,0x08,0x20
.byte 0x00,0x00,0x00,0x00
.byte 0x20,0x00,0x08,0x00
.byte 0x00,0x10,0x08,0x20
.byte 0x00,0x00,0x00,0x20
.byte 0x20,0x00,0x00,0x20
.byte 0x00,0x10,0x08,0x20
.byte 0x00,0x00,0x08,0x00
.byte 0x20,0x10,0x08,0x00
.byte 0x20,0x10,0x08,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x20,0x00,0x08,0x20
.byte 0x20,0x10,0x00,0x20
.byte 0x00,0x00,0x08,0x20
.byte 0x20,0x00,0x00,0x20
.byte 0x20,0x10,0x00,0x20
.byte 0x00,0x10,0x00,0x00
.byte 0x00,0x10,0x00,0x20
.byte 0x00,0x00,0x08,0x00
.byte 0x20,0x10,0x08,0x00
.byte 0x20,0x00,0x00,0x20
.byte 0x20,0x10,0x08,0x20
.byte 0x20,0x00,0x00,0x00
.byte 0x00,0x00,0x08,0x20
.byte 0x00,0x10,0x08,0x00
.byte 0x20,0x00,0x00,0x00
.byte 0x00,0x10,0x00,0x20
.byte 0x00,0x10,0x00,0x00
.byte 0x00,0x00,0x08,0x20
.byte 0x00,0x10,0x08,0x00
.byte 0x20,0x10,0x08,0x20
.byte 0x20,0x00,0x00,0x20
.byte 0x20,0x10,0x00,0x00
.byte 0x20,0x00,0x08,0x20
.byte 0x20,0x10,0x00,0x20
.byte 0x00,0x00,0x00,0x00
.byte 0x20,0x10,0x08,0x00
.byte 0x00,0x00,0x08,0x00
.byte 0x00,0x00,0x00,0x20
.byte 0x20,0x10,0x00,0x00
.byte 0x20,0x00,0x08,0x20
.byte 0x00,0x00,0x00,0x20
.byte 0x20,0x00,0x08,0x00
.byte 0x00,0x10,0x08,0x20
.byte 0x00,0x00,0x00,0x00
.byte 0x20,0x10,0x00,0x20
.byte 0x00,0x10,0x00,0x00
.byte 0x20,0x00,0x08,0x00
.byte 0x00,0x10,0x08,0x20
S7P_table:
.byte 0x10,0x00,0x00,0x00
.byte 0x10,0x02,0x01,0x00
.byte 0x00,0x02,0x01,0x04
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x04
.byte 0x00,0x02,0x01,0x04
.byte 0x10,0x00,0x01,0x04
.byte 0x10,0x02,0x00,0x04
.byte 0x10,0x02,0x01,0x04
.byte 0x10,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x02,0x01,0x00
.byte 0x00,0x00,0x01,0x00
.byte 0x00,0x02,0x00,0x00
.byte 0x10,0x02,0x01,0x00
.byte 0x00,0x00,0x01,0x04
.byte 0x00,0x02,0x00,0x04
.byte 0x10,0x00,0x01,0x04
.byte 0x10,0x00,0x01,0x00
.byte 0x00,0x02,0x00,0x04
.byte 0x00,0x02,0x01,0x00
.byte 0x10,0x02,0x00,0x00
.byte 0x10,0x02,0x00,0x04
.byte 0x10,0x00,0x01,0x00
.byte 0x10,0x02,0x00,0x00
.byte 0x00,0x00,0x00,0x04
.byte 0x00,0x00,0x01,0x04
.byte 0x10,0x02,0x01,0x04
.byte 0x10,0x00,0x00,0x04
.byte 0x00,0x00,0x01,0x00
.byte 0x00,0x02,0x00,0x00
.byte 0x10,0x00,0x00,0x04
.byte 0x00,0x02,0x00,0x00
.byte 0x10,0x00,0x00,0x04
.byte 0x10,0x00,0x00,0x00
.byte 0x00,0x02,0x01,0x04
.byte 0x00,0x02,0x01,0x04
.byte 0x10,0x02,0x01,0x00
.byte 0x10,0x02,0x01,0x00
.byte 0x00,0x00,0x01,0x00
.byte 0x10,0x00,0x01,0x00
.byte 0x00,0x02,0x00,0x00
.byte 0x00,0x02,0x00,0x04
.byte 0x10,0x00,0x00,0x00
.byte 0x10,0x02,0x00,0x04
.byte 0x00,0x00,0x01,0x04
.byte 0x10,0x00,0x01,0x04
.byte 0x10,0x02,0x00,0x04
.byte 0x00,0x00,0x01,0x04
.byte 0x00,0x02,0x01,0x00
.byte 0x10,0x02,0x01,0x04
.byte 0x10,0x02,0x00,0x00
.byte 0x10,0x00,0x00,0x04
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x01,0x00
.byte 0x10,0x02,0x01,0x04
.byte 0x00,0x00,0x00,0x00
.byte 0x10,0x00,0x01,0x04
.byte 0x10,0x02,0x00,0x00
.byte 0x00,0x00,0x00,0x04
.byte 0x00,0x02,0x01,0x00
.byte 0x00,0x02,0x00,0x04
.byte 0x00,0x00,0x00,0x04
.byte 0x10,0x00,0x01,0x00
S8P_table:
.byte 0x00,0x08,0x20,0x08
.byte 0x00,0x00,0x00,0x08
.byte 0x02,0x00,0x00,0x00
.byte 0x02,0x08,0x20,0x08
.byte 0x00,0x08,0x00,0x00
.byte 0x00,0x08,0x20,0x08
.byte 0x00,0x00,0x20,0x00
.byte 0x00,0x08,0x00,0x00
.byte 0x02,0x00,0x20,0x00
.byte 0x02,0x08,0x00,0x00
.byte 0x02,0x08,0x20,0x08
.byte 0x02,0x00,0x00,0x08
.byte 0x02,0x08,0x00,0x08
.byte 0x02,0x00,0x20,0x08
.byte 0x00,0x00,0x00,0x08
.byte 0x00,0x00,0x20,0x00
.byte 0x02,0x08,0x00,0x00
.byte 0x00,0x08,0x20,0x00
.byte 0x00,0x08,0x00,0x08
.byte 0x00,0x00,0x20,0x08
.byte 0x02,0x00,0x00,0x08
.byte 0x02,0x00,0x20,0x00
.byte 0x02,0x08,0x20,0x00
.byte 0x02,0x08,0x00,0x08
.byte 0x00,0x00,0x20,0x08
.byte 0x00,0x00,0x00,0x00
.byte 0x00,0x00,0x00,0x00
.byte 0x02,0x08,0x20,0x00
.byte 0x00,0x08,0x20,0x00
.byte 0x00,0x08,0x00,0x08
.byte 0x02,0x00,0x20,0x08
.byte 0x02,0x00,0x00,0x00
.byte 0x02,0x00,0x20,0x08
.byte 0x02,0x00,0x00,0x00
.byte 0x02,0x08,0x00,0x08
.byte 0x00,0x00,0x00,0x08
.byte 0x00,0x00,0x20,0x00
.byte 0x02,0x08,0x20,0x00
.byte 0x00,0x00,0x00,0x08
.byte 0x02,0x00,0x20,0x08
.byte 0x00,0x08,0x00,0x08
.byte 0x00,0x00,0x20,0x00
.byte 0x00,0x08,0x20,0x00
.byte 0x02,0x08,0x00,0x00
.byte 0x02,0x08,0x20,0x00
.byte 0x00,0x08,0x00,0x00
.byte 0x02,0x00,0x00,0x00
.byte 0x00,0x08,0x20,0x08
.byte 0x00,0x00,0x00,0x00
.byte 0x02,0x08,0x20,0x08
.byte 0x02,0x00,0x20,0x00
.byte 0x00,0x08,0x20,0x00
.byte 0x02,0x08,0x00,0x00
.byte 0x00,0x08,0x00,0x08
.byte 0x00,0x08,0x20,0x08
.byte 0x00,0x00,0x00,0x00
.byte 0x02,0x08,0x20,0x08
.byte 0x02,0x00,0x00,0x08
.byte 0x02,0x00,0x00,0x08
.byte 0x00,0x00,0x20,0x08
.byte 0x00,0x00,0x20,0x08
.byte 0x02,0x00,0x20,0x00
.byte 0x00,0x08,0x00,0x00
.byte 0x02,0x08,0x00,0x08
 

	.end
